generator client {
  provider = "prisma-client-js"
}

 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  student
  parent
  teacher
  admin
}

model Role {
  id        Int       @id @default(autoincrement())
  name      RoleName  @unique
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                    String     @id @default(uuid()) @db.Uuid
  email                 String     @unique
  displayName           String?
  nickname              String?    // 搜索昵称
  school                String?    // 学校名称
  className             String?    // 班级名称
  discoverable          Boolean    @default(false) // 是否可被搜索
  anonymousId           String?    // 匿名ID，用于搜索
  passwordHash          String?
  roleId                Int
  role                  Role       @relation(fields: [roleId], references: [id])
  sessions              Session[]
  // 班级相关
  ownedClasses          Class[]    @relation("ClassOwner")
  classEnrollments      ClassEnrollment[] @relation("ClassEnrollments")
  // 关系相关
  studentRelationships  Relationship[] @relation("StudentRelationships")
  partyRelationships    Relationship[] @relation("PartyRelationships")
  // 授权相关
  accessGrants          AccessGrant[] @relation("AccessGrants")
  studentAccessGrants   AccessGrant[] @relation("StudentAccessGrants")
  // 同意书相关
  studentConsents       Consent[]  @relation("StudentConsents")
  requesterConsents     Consent[]  @relation("RequesterConsents")
  // 审计日志
  auditLogs             AuditLog[] @relation("AuditLogs")
  // 申诉相关
  submittedAppeals      Appeal[]   @relation("SubmittedAppeals")
  targetAppeals         Appeal[]   @relation("TargetAppeals")
  reviewedAppeals       Appeal[]   @relation("ReviewedAppeals")
  // 指标快照
  metricsSnapshots      MetricsSnapshot[]
  // 安全相关
  status                String     @default("ACTIVE") // ACTIVE, SUSPENDED
  suspendedAt           DateTime?
  needsAuditReview      Boolean    @default(false)
  auditReviewRequestedAt DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 班级表
model Class {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  ownerTeacherId String   @db.Uuid
  ownerTeacher  User     @relation("ClassOwner", fields: [ownerTeacherId], references: [id])
  code          String   @unique // 邀请码
  status        ClassStatus @default(ACTIVE)
  enrollments   ClassEnrollment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("classes")
}

// 班级注册表
model ClassEnrollment {
  id        String   @id @default(uuid()) @db.Uuid
  classId   String   @db.Uuid
  studentId String   @db.Uuid
  status    EnrollmentStatus @default(PENDING)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation("ClassEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, studentId])
  @@map("class_enrollments")
}

// 关系表 - 学生与家长/老师的关系
model Relationship {
  id          String   @id @default(uuid()) @db.Uuid
  studentId   String   @db.Uuid
  partyId     String   @db.Uuid
  partyRole   PartyRole
  source      RelationshipSource
  status      RelationshipStatus @default(PENDING)
  student     User     @relation("StudentRelationships", fields: [studentId], references: [id], onDelete: Cascade)
  party       User     @relation("PartyRelationships", fields: [partyId], references: [id], onDelete: Cascade)
  accessGrants AccessGrant[]
  createdAt   DateTime @default(now())
  revokedAt   DateTime?
  updatedAt   DateTime @updatedAt

  @@unique([studentId, partyId])
  @@map("relationships")
}

// 访问授权表
model AccessGrant {
  id           String      @id @default(uuid()) @db.Uuid
  granteeId    String      @db.Uuid
  studentId    String      @db.Uuid
  scope        String[]    // 例如: ["progress:read", "works:read", "metrics:read"]
  status       GrantStatus @default(ACTIVE)
  expiresAt    DateTime?
  grantedAt    DateTime?   // 授权时间
  grantedBy    String?     @db.Uuid // 授权者
  revokedAt    DateTime?   // 撤销时间
  revokedBy    String?     @db.Uuid // 撤销者
  reason       String?     // 授权或撤销原因
  relationshipId String?   @db.Uuid
  relationship   Relationship? @relation(fields: [relationshipId], references: [id], onDelete: Cascade)
  grantee      User        @relation("AccessGrants", fields: [granteeId], references: [id], onDelete: Cascade)
  student      User        @relation("StudentAccessGrants", fields: [studentId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("access_grants")
}

// 同意书表
model Consent {
  id          String      @id @default(uuid()) @db.Uuid
  studentId   String      @db.Uuid
  requesterId String      @db.Uuid
  purpose     String      // 例如: "parent-view", "teacher-progress"
  scope       String[]    // 例如: ["progress:read", "works:read"]
  status      ConsentStatus @default(PENDING)
  reason      String?     // 申请理由或拒绝理由
  expiresAt   DateTime?
  student     User        @relation("StudentConsents", fields: [studentId], references: [id], onDelete: Cascade)
  requester   User        @relation("RequesterConsents", fields: [requesterId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("consents")
}

// 审计日志表
model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  actorId    String   @db.Uuid
  action     String   // 例如: "view_progress", "grant_access", "revoke_access"
  targetType String   // 例如: "student", "class", "relationship"
  targetId   String   @db.Uuid
  metadata   Json?    // 额外的元数据，记录"查看了谁的什么数据"等
  ts         DateTime @default(now()) @map("ts") // 时间戳字段
  ipAddress  String?  @map("ipAddress") // IP地址
  userAgent  String?  @map("userAgent") // 用户代理
  severity   String?  @map("severity") // 严重程度
  actor      User     @relation("AuditLogs", fields: [actorId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) // 使用 createdAt 字段名
  updatedAt  DateTime @updatedAt

  @@map("audit_logs")
}

// 指标快照表
model MetricsSnapshot {
  id              String   @id @default(uuid()) @db.Uuid
  studentId       String   @db.Uuid
  date            DateTime @db.Date
  chapterId       String?  @db.Uuid
  tasksDone       Int      @default(0)
  accuracy        Float    @default(0.0)
  timeSpentMin    Int      @default(0)
  streakDays      Int      @default(0)
  xpGained        Int      @default(0)
  student         User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())

  @@unique([studentId, date, chapterId])
  @@map("metrics_snapshots")
}

// 枚举定义
enum ClassStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  REVOKED
}

enum PartyRole {
  PARENT
  TEACHER
}

enum RelationshipSource {
  SHARE_CODE
  SEARCH
  CLASS_INVITE
  MANUAL
}

enum RelationshipStatus {
  PENDING
  ACTIVE
  REVOKED
  EXPIRED
}

enum GrantStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  REVOKED
}

enum ConsentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  REVOKED
}

enum AppealType {
  UNAUTHORIZED_ACCESS
  EXCESSIVE_DATA_VIEW
  PRIVACY_VIOLATION
  PERMISSION_ABUSE
  OTHER
}

enum AppealStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  CLOSED
}

model Appeal {
  id              String       @id @default(uuid()) @db.Uuid
  studentId       String       @db.Uuid
  student         User         @relation("SubmittedAppeals", fields: [studentId], references: [id])
  targetUserId    String       @db.Uuid
  targetUser      User         @relation("TargetAppeals", fields: [targetUserId], references: [id])
  appealType      AppealType
  description     String
  evidence        Json?        @default("{}")
  requestedAction String
  status          AppealStatus @default(PENDING)
  submittedAt     DateTime     @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?      @db.Uuid
  reviewer        User?        @relation("ReviewedAppeals", fields: [reviewedBy], references: [id])
  reviewReason    String?
  reviewActions   String[]     @default([])
  closedAt        DateTime?
  closedBy        String?      @db.Uuid
  closeReason     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([studentId])
  @@index([targetUserId])
  @@index([status])
  @@index([appealType])
}