generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  role      Role
  name      String
  avatar    String?
  createdAt DateTime @default(now())

  // Reverse relationships
  parentRequestsSent   ParentLinkRequest[] @relation("ParentIs")
  parentRequestsToMe   ParentLinkRequest[] @relation("StudentIs")
  classesOwned         Class[]             @relation("TeacherOwns")
  classMemberships     ClassMember[]       @relation("StudentMember")
  learnEvents          LearnEvent[]
  dailyStats           DailyStat[]
  packageProgress      PackageProgress[]
}

enum Role {
  student
  parent
  teacher
  admin
}

model ParentLinkRequest {
  id         String   @id @default(cuid())
  parentId   String
  studentId  String
  status     ConsentStatus
  note       String?
  createdAt  DateTime @default(now())
  decidedAt  DateTime?

  parent     User     @relation("ParentIs", fields: [parentId], references: [id], onDelete: Cascade)
  student    User     @relation("StudentIs", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId, status])
}

enum ConsentStatus {
  pending
  approved
  rejected
  revoked
}

model Class {
  id        String   @id @default(cuid())
  teacherId String
  name      String
  code      String   @unique
  codeTTL   DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  teacher   User     @relation("TeacherOwns", fields: [teacherId], references: [id])
  members   ClassMember[]
}

model ClassMember {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  status    MemberStatus
  joinedAt  DateTime?

  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation("StudentMember", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([classId, studentId])
}

enum MemberStatus {
  pending
  approved
  rejected
  removed
}

model LearnEvent {
  id         String   @id @default(cuid())
  studentId  String
  levelId    String
  passed     Boolean
  timeMs     Int?
  ts         DateTime @db.Timestamp(6)

  student    User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model DailyStat {
  id             String   @id @default(cuid())
  date           DateTime @db.Date
  studentId      String
  studyMinutes   Int      @default(0)
  attempts       Int      @default(0)
  passes         Int      @default(0)
  levelsCompleted Int     @default(0)

  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, date])
}

model PackageProgress {
  id         String  @id @default(cuid())
  studentId  String
  pkgId      String
  completed  Int     @default(0)
  total      Int
  updatedAt  DateTime @updatedAt

  student    User    @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, pkgId])
}