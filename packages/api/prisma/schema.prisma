generator client {
  provider = "prisma-client-js"
}

 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  student
  parent
  teacher
  admin
}

model Role {
  id        Int       @id @default(autoincrement())
  name      RoleName  @unique
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id                    String     @id @default(uuid()) @db.Uuid
  email                 String     @unique
  displayName           String?
  passwordHash          String?
  roleId                Int
  role                  Role       @relation(fields: [roleId], references: [id])
  sessions              Session[]
  // 班级相关
  ownedClasses          Class[]    @relation("ClassOwner")
  classEnrollments      ClassEnrollment[] @relation("ClassEnrollments")
  // 关系相关
  studentRelationships  Relationship[] @relation("StudentRelationships")
  partyRelationships    Relationship[] @relation("PartyRelationships")
  // 授权相关
  accessGrants          AccessGrant[] @relation("AccessGrants")
  // 同意书相关
  studentConsents       Consent[]  @relation("StudentConsents")
  requesterConsents     Consent[]  @relation("RequesterConsents")
  // 审计日志
  auditLogs             AuditLog[] @relation("AuditLogs")
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 班级表
model Class {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  ownerTeacherId String   @db.Uuid
  ownerTeacher  User     @relation("ClassOwner", fields: [ownerTeacherId], references: [id])
  inviteCode    String   @unique
  isActive      Boolean  @default(true)
  enrollments   ClassEnrollment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("classes")
}

// 班级注册表
model ClassEnrollment {
  id        String   @id @default(uuid()) @db.Uuid
  classId   String   @db.Uuid
  studentId String   @db.Uuid
  status    EnrollmentStatus @default(PENDING)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User     @relation("ClassEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classId, studentId])
  @@map("class_enrollments")
}

// 关系表 - 学生与家长/老师的关系
model Relationship {
  id          String   @id @default(uuid()) @db.Uuid
  studentId   String   @db.Uuid
  partyId     String   @db.Uuid
  partyRole   PartyRole
  source      RelationshipSource
  status      RelationshipStatus @default(ACTIVE)
  student     User     @relation("StudentRelationships", fields: [studentId], references: [id], onDelete: Cascade)
  party       User     @relation("PartyRelationships", fields: [partyId], references: [id], onDelete: Cascade)
  accessGrants AccessGrant[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([studentId, partyId])
  @@map("relationships")
}

// 访问授权表
model AccessGrant {
  id           String      @id @default(uuid()) @db.Uuid
  resourceType ResourceType
  resourceId   String      @db.Uuid
  granteeId    String      @db.Uuid
  scope        String[]    // 例如: ["progress:read", "works:read"]
  status       GrantStatus @default(ACTIVE)
  expiresAt    DateTime?
  relationshipId String?   @db.Uuid
  relationship   Relationship? @relation(fields: [relationshipId], references: [id], onDelete: Cascade)
  grantee      User        @relation("AccessGrants", fields: [granteeId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("access_grants")
}

// 同意书表
model Consent {
  id          String      @id @default(uuid()) @db.Uuid
  studentId   String      @db.Uuid
  requesterId String      @db.Uuid
  purpose     String      // 例如: "parent-view", "teacher-progress"
  status      ConsentStatus @default(PENDING)
  expiresAt   DateTime?
  student     User        @relation("StudentConsents", fields: [studentId], references: [id], onDelete: Cascade)
  requester   User        @relation("RequesterConsents", fields: [requesterId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("consents")
}

// 审计日志表
model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  actorId    String   @db.Uuid
  action     String   // 例如: "view_progress", "grant_access", "revoke_access"
  targetType String   // 例如: "student", "class", "relationship"
  targetId   String   @db.Uuid
  metadata   Json?    // 额外的元数据
  actor      User     @relation("AuditLogs", fields: [actorId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

// 枚举定义
enum EnrollmentStatus {
  PENDING
  ACTIVE
  REVOKED
}

enum PartyRole {
  PARENT
  TEACHER
}

enum RelationshipSource {
  INVITE_CODE
  CLASS_LINK
  MANUAL
}

enum RelationshipStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum ResourceType {
  STUDENT_PROGRESS
  STUDENT_WORKS
  CLASS_PROGRESS
}

enum GrantStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  REVOKED
}

enum ConsentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  REVOKED
}